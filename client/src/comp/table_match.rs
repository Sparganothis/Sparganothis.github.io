use game::{
    api::{
        game_match::GameMatch, websocket::{GetMatchList, GetMatchListArg}
    },
    random::GameSeed,
    timestamp::get_human_readable_nano,
};

use crate::websocket::demo_comp::call_api_sync;
use leptos::*;
use leptos_struct_table::*;

#[component]
pub fn AllMatchTable(list_type: GetMatchListArg) -> impl IntoView {
    let all_games = create_rw_signal(vec![]);
    call_api_sync::<GetMatchList>(list_type, move |_r| {
        all_games.set(_r);
    });

    let table_from_rows = move || {
        let rows = all_games.get();
            let rows = rows
                .iter()
                .map(|r| GameMatchTableRow::new(r.clone()))
                // .filter(|f| f.num_segments > 0)
                .collect::<Vec<_>>();

            view! {
                <table id=format!("{list_type:?}")>
                    <TableContent rows/>
                // row_renderer=CustomTableRowRenderer
                </table>
            }
            .into_view()
    };

    view! { {table_from_rows} }
}

// #[allow(unused_variables, non_snake_case)]
// pub fn CustomTableRowRenderer(
//     // The class attribute for the row element. Generated by the classes provider.
//     class: Signal<String>,
//     // The row to render.
//     row: GameMatchTableRow,
//     // The index of the row. Starts at 0 for the first body row.
//     index: usize,
//     // The selected state of the row. True, when the row is selected.
//     selected: Signal<bool>,
//     // Event handler callback when this row is selected
//     on_select: EventHandler<web_sys::MouseEvent>,
//     // Event handler callback for changes
//     on_change: EventHandler<ChangeEvent<GameMatchTableRow>>,
// ) -> impl IntoView {
//     let row2 = row.clone();
//     let row3 = row.clone();
//     view! {
//         <tr class=class on:click=move |mouse_event| on_select.run(mouse_event)>
//             {row2.render_row(index, on_change)}
//             <td>
//                 <a href=move || {
//                     if row3.is_in_progress {
//                         format!("/spectate-game/{}", row.to_url())
//                     } else {
//                         format!("/view-game/{}", row.to_url())
//                     }
//                 }>
//                     {move || {
//                         if row3.is_in_progress {
//                             "Spectate".to_string()
//                         } else {
//                             "Replay".to_string()
//                         }
//                     }}

//                 </a>
//             </td>
//         </tr>
//     }
// }

use leptos_struct_table::BootstrapClassesPreset;

#[derive(TableRow, Clone, Debug)]
#[table( 
    classes_provider = "BootstrapClassesPreset", impl_vec_data_provider)]
pub struct GameMatchTableRow {
    #[table(renderer = "MatchLinkRenderer")]
    pub match_id: uuid::Uuid,
    #[table(renderer = "SeedRenderer")]
    pub init_seed: GameSeed,
    #[table(renderer = "TimeRenderer")]
    pub start_time: i64,

    #[table(renderer = "UserLinkRenderer")]
    pub user0: uuid::Uuid,
    #[table(renderer = "UserLinkRenderer")]
    pub user1: uuid::Uuid,
    // pub title: String,
}

impl GameMatchTableRow {
    pub fn new(db_row: (uuid::Uuid, GameMatch)) -> Self {
        Self {
            match_id: db_row.0,
            init_seed: db_row.1.seed,
            start_time: db_row.1.time,
            user0: db_row.1.users[0],
            user1:  db_row.1.users[1]
            // title : db_row.1.title,
        }
    }

    // pub fn to_url(&self) -> String {
    //     GameId {
    //         user_id: self.user_id,
    //         init_seed: self.init_seed,
    //         start_time: self.start_time,
    //     }
    //     .to_url()
    // }
}

#[allow(unused_variables)]
#[component]
fn TimeRenderer<F>(
    class: String,
    #[prop(into)] value: MaybeSignal<i64>,
    on_change: F,
    index: usize,
) -> impl IntoView
where
    F: Fn(i64) + 'static,
{
    view! {
        <td class=class>
            <p>{move || { get_human_readable_nano(value.get()) }}</p>
        </td>
    }
}

#[allow(unused_variables)]
#[component]
fn UserLinkRenderer<F>(
    class: String,
    #[prop(into)] value: MaybeSignal<uuid::Uuid>,
    on_change: F,
    index: usize,
) -> impl IntoView
where
    F: Fn(uuid::Uuid) + 'static,
{
    view! {
        <td class=class>
            <a href=format!("/user/{:?}", value.get())>
                <p style="border: 1px solid black">
                    {move || { format!("{:?}", value.get())[0..8].to_string() }}
                </p>
            </a>
        </td>
    }
}

#[allow(unused_variables)]
#[component]
fn MatchLinkRenderer<F>(
    class: String,
    #[prop(into)] value: MaybeSignal<uuid::Uuid>,
    on_change: F,
    index: usize,
) -> impl IntoView
where
    F: Fn(uuid::Uuid) + 'static,
{
    view! {
        <td class=class>
            <a href=format!("/match/{:?}", value.get())>
                <p style="border: 1px solid black">
                    {move || { format!("{:?}", value.get())[0..8].to_string() }}
                </p>
            </a>
        </td>
    }
}

#[allow(unused_variables)]
#[component]
fn SeedRenderer<F>(
    class: String,
    #[prop(into)] value: MaybeSignal<GameSeed>,
    on_change: F,
    index: usize,
) -> impl IntoView
where
    F: Fn(GameSeed) + 'static,
{
    view! {
        <td class=class>
            <p>{move || format!("{:?}, ..", value.get()[0])}</p>
        </td>
    }
}
