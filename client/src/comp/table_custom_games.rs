use leptos::*;


use game::{
    api::websocket::GetAllCustomGames, tet::GameState
};

use crate::comp::table_generic::TablePaginateDirection;
use crate::websocket::demo_comp::call_api_sync;
use leptos_struct_table::*;

#[component]
pub fn ListAllCustomGames() -> impl IntoView {


    let fi = Callback::new(move |(k, cb): (TablePaginateDirection<_>, Callback<_>)| {

        match k {
            TablePaginateDirection::Forward(key) => todo!(),
            TablePaginateDirection::Back(key) => todo!(),
            TablePaginateDirection::InitialPage => {
                call_api_sync::<GetAllCustomGames>((), move |x| {
                    cb.call(x);
                });
            },
        }
    });

    log::warn!("hello sirs");
    type DataP = Vec<CustomGameDbRow>;
    use crate::comp::table_generic::DisplayTableGeneric;
    view! {
        <
            DisplayTableGeneric<
                GameState,
                CustomGameDbRow,
                String,
                DataP,
            > 
            fetch_items=fi 
        />
    }.into_view()
}


use leptos_struct_table::BootstrapClassesPreset;
#[derive(TableRow, Clone, Debug)]
#[table( 
    classes_provider = "BootstrapClassesPreset", impl_vec_data_provider)]
pub struct CustomGameDbRow {
    pub save_name: String,
    #[table(skip)]
    pub game_state: GameState,
    pub start_time: i64,
}

impl From<(String, GameState)> for CustomGameDbRow {
    fn from(db_row: (String, GameState)) -> Self {
        Self {
            save_name: db_row.0,
            game_state: db_row.1.clone(),
            start_time: db_row.1.start_time,
        }
    }

}

use super::table_generic::CustomRowExtraView;
impl CustomRowExtraView for CustomGameDbRow {
    fn row_extra_view(&self) -> impl IntoView{
        let url2 =  format!("/edit-custom-game/{}", self.save_name);

        let url3 =
            format!("/play-custom-game/{}", self.save_name);

        view! {
            <td>
                <a href={url2}>Edit</a>
            </td>
            <td>
                <a href={url3}>Play</a>
            </td>
        }
    }
}


#[allow(unused_variables, non_snake_case)]
pub fn CustomTableRowRenderer(
    // The class attribute for the row element. Generated by the classes provider.
    class: Signal<String>,
    // The row to render.
    row: CustomGameDbRow,
    // The index of the row. Starts at 0 for the first body row.
    index: usize,
    // The selected state of the row. True, when the row is selected.
    selected: Signal<bool>,
    // Event handler callback when this row is selected
    on_select: EventHandler<web_sys::MouseEvent>,
    // Event handler callback for changes
    on_change: EventHandler<ChangeEvent<CustomGameDbRow>>,
) -> impl IntoView {
    let row2 = row.clone();
    let row3 = row.clone();
    view! {
        <tr class=class on:click=move |mouse_event| on_select.run(mouse_event)>
            {row2.render_row(index, on_change)}

        </tr>
    }
}