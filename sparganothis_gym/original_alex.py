# -*- coding: utf-8 -*-
"""sparganothis_vim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mLhYflD5qOu4OM9lYGmReoNZmg-Od6Hq
"""

# !pip install sparganothis_vim gymnasium --quiet

import sparganothis_vim
print(sparganothis_vim.sum_as_string(5, 20))

seed = sparganothis_vim.generate_random_seed()
print("seed1", seed)
print("seed1", seed.ts)
print("seed1", seed.seed)
"seed1",
seed2 = sparganothis_vim.generate_seed(0, [0]*32)
print("seed2", seed2)
print("seed2", seed2.ts)
print("seed2", seed2.seed)

state = sparganothis_vim.GameStatePy(seed)
print(state)

print("state getters:", [k for k in dir(state) if not k.startswith("_")])
print("seed getters:", [k for k in dir(seed) if not k.startswith("_")])

print(" current rotation  ", state.current_pcs_rotation )
print(" debug current info  ", state.debug_current_pcs_info)
print(" game over  ", state.game_over )
print(" hold ", state.hold)
print(" main ", str(state.main_board)[0:20] )
print(" next ", state.next_pcs )
print(" total_lines ", state.total_lines)
print(" score ", state.score)

print(" next actions ", [k[0] for k in state.next_actions_and_states])

state.next_actions_and_states[0][1].next_actions_and_states[0][1]

state.hold

state.next_actions_and_states

nn = dict(state.next_actions_and_states)

nn["Hold"].hold

import gymnasium as gym
from gymnasium import spaces
from gymnasium.envs.registration import register
from gymnasium.utils.env_checker import check_env
import numpy as np

ALL_ACTIONS = ['HardDrop', 'SoftDrop', 'MoveLeft', 'MoveRight', 'Hold', 'RotateLeft', 'RotateRight']
ALL_PIECES = ['I', 'J', 'L', 'O', 'S', 'T', 'Z']
BOARD_SHAPE = (20, 10)

def a2i(a):
  return ALL_ACTIONS.index(a)

def i2a(i):
  return ALL_ACTIONS[i]

def al2m(al):
  r = np.zeros(len(ALL_ACTIONS))
  if not al:
    return r
  for a in al:
    r[a2i(a)] = 1
  return r

def p2i(p):
  if not p:
    return -1
  return ALL_PIECES.index(p)

def i2p(i):
  return ALL_PIECES[i]

class TetrisEnv(gym.Env):
  metadata = {"render_modes": ["human"], 'render_fps': 4}

  def __init__(self, render_mode=None):
    self.render_mode = render_mode

    self.action_space = spaces.Discrete(len(ALL_ACTIONS))

    self.observation_space = spaces.Dict(
      {
        'board': spaces.Box(
          low=0,
          high=1,
          shape=BOARD_SHAPE,
          dtype=np.int32
        ),
        'next': spaces.Box(
          low=0,
          high=len(ALL_PIECES),
          shape=(5,),
          dtype=np.int32
        ),
        'hold': spaces.Discrete(len(ALL_PIECES) + 1),
      }
    )

    self.vim_seed = sparganothis_vim.generate_random_seed()
    self.vim_state = sparganothis_vim.GameStatePy(self.vim_seed)

  def obs_vim_state(self):
    return {
      'board': np.array(self.vim_state.main_board).astype(int),
      'next': [p2i(p) for p in self.vim_state.next_pcs[:5]],
      'hold': p2i(self.vim_state.hold) + 1,
    }, {
      'action_mask' : np.array(al2m([a for a,_ in self.vim_state.next_actions_and_states]), dtype=np.int8),
      'game_over' : self.vim_state.game_over
    }

  def reward_vim_state(self, prev_state):
    terminated = self.vim_state.game_over
    reward = self.vim_state.score + 500 * self.vim_state.total_garbage_sent + 250 * self.vim_state.total_lines - 3 * self.vim_state.total_move_count

    if terminated:
      reward -= 1000

    return reward, terminated

  def reset(self, seed=None, options=None):
    super().reset(seed=seed)

    if seed is None:
      self.vim_seed = sparganothis_vim.generate_random_seed()
    else:
      self.vim_seed = sparganothis_vim.generate_seed(seed)

    self.vim_state = sparganothis_vim.GameStatePy(self.vim_seed)

    obs, info = self.obs_vim_state()

    if(self.render_mode=='human'):
      self.render()

    return obs, info

  def step(self, action):
    # Perform action
    last_vim_state = self.vim_state
    self.vim_state = dict(self.vim_state.next_actions_and_states)[i2a(action)]

    # Determine reward and termination
    reward, terminated = self.reward_vim_state(last_vim_state)

    # Construct the observation state:
    obs, info = self.obs_vim_state()

    # Render environment
    if(self.render_mode=='human'):
      self.render()

    # Return observation, reward, terminated, truncated (not used), info
    return obs, reward, terminated, False, info

  # Gym required function to render environment
  def render(self):
    pass

env = TetrisEnv()

print(np.zeros(len(ALL_ACTIONS)).shape)

obs, info = env.reset()

# Take some random actions
while(True):
  rand_action = env.action_space.sample(mask=info['action_mask'])
  print(i2a(rand_action))
  obs, reward, terminated, _, info = env.step(rand_action)

  if terminated:
    print(reward)
    break

import math
import random
import matplotlib
import matplotlib.pyplot as plt
from collections import namedtuple, deque
from itertools import count

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F

# set up matplotlib
is_ipython = 'inline' in matplotlib.get_backend()
if is_ipython:
    from IPython import display

plt.ion()

# if GPU is to be used
device = torch.device(
    "cuda" if torch.cuda.is_available() else
    "mps" if torch.backends.mps.is_available() else
    "cpu"
)

Transition = namedtuple('Transition',
                        ('state', 'action', 'next_state', 'reward'))


class ReplayMemory(object):

    def __init__(self, capacity):
        self.memory = deque([], maxlen=capacity)

    def push(self, *args):
        """Save a transition"""
        self.memory.append(Transition(*args))

    def sample(self, batch_size):
        return random.sample(self.memory, batch_size)

    def __len__(self):
        return len(self.memory)

class DQN(nn.Module):

    def __init__(self, num_features):
        super(DQN, self).__init__()
        self.layer_hold = nn.Linear(len(ALL_PIECES) + 1, num_features)
        self.layer_next = nn.Linear(5 * len(ALL_PIECES), num_features)
        self.layer_board = nn.Linear(BOARD_SHAPE[0] * BOARD_SHAPE[1], num_features)
        self.layer_hiden = nn.Linear(3 * num_features, num_features)
        self.layer_actions = nn.Linear(num_features, len(ALL_ACTIONS))

    # Called with either one element to determine next action, or a batch
    def forward(self, x):
        b = x['board'].shape[0]
        bx = torch.nn.functional.relu(
            self.layer_board(
                x['board'].view(b, BOARD_SHAPE[0] * BOARD_SHAPE[1])
            )
        )
        nx = torch.nn.functional.relu(
            self.layer_next(
                x['next'].view(b, 5 * len(ALL_PIECES))
            )
        )
        hx = torch.nn.functional.relu(
            self.layer_hold(x['hold'])
        )

        r = torch.nn.functional.relu(self.layer_hiden(torch.cat([bx, nx, hx], axis=1)))
        r = self.layer_actions(r)

        return r

# BATCH_SIZE is the number of transitions sampled from the replay buffer
# GAMMA is the discount factor as mentioned in the previous section
# EPS_START is the starting value of epsilon
# EPS_END is the final value of epsilon
# EPS_DECAY controls the rate of exponential decay of epsilon, higher means a slower decay
# TAU is the update rate of the target network
# LR is the learning rate of the ``AdamW`` optimizer
BATCH_SIZE = 128
GAMMA = 0.99
EPS_START = 0.9
EPS_END = 0.05
EPS_DECAY = 1000
TAU = 0.005
LR = 1e-4

policy_net = DQN(128).to(device)
target_net = DQN(128).to(device)
target_net.load_state_dict(policy_net.state_dict())

optimizer = optim.AdamW(policy_net.parameters(), lr=LR, amsgrad=True)
memory = ReplayMemory(10000)


steps_done = 0


def select_action(state, info):
    global steps_done
    sample = random.random()
    eps_threshold = EPS_END + (EPS_START - EPS_END) * \
        math.exp(-1. * steps_done / EPS_DECAY)
    steps_done += 1
    if sample > eps_threshold:
        with torch.no_grad():
            return (
                policy_net({
                    'board': state['board'][None, ::],
                    'next': state['next'][None, ::],
                    'hold': state['hold'][None, ::]
                }).squeeze() * torch.tensor(
                  info['action_mask'],
                  device=device,
                  dtype=torch.float32
                )
            ).argmax().view(1, 1)
    else:
        return torch.tensor(
            [[env.action_space.sample(mask=info['action_mask'])]],
            device=device,
            dtype=torch.long
        )


episode_durations = []


def plot_durations(show_result=False):
    plt.figure(1)
    durations_t = torch.tensor(episode_durations, dtype=torch.float)
    if show_result:
        plt.title('Result')
    else:
        plt.clf()
        plt.title('Training...')
    plt.xlabel('Episode')
    plt.ylabel('Duration')
    plt.plot(durations_t.numpy())
    # Take 100 episode averages and plot them too
    if len(durations_t) >= 100:
        means = durations_t.unfold(0, 100, 1).mean(1).view(-1)
        means = torch.cat((torch.zeros(99), means))
        plt.plot(means.numpy())

    plt.pause(0.001)  # pause a bit so that plots are updated
    if is_ipython:
        if not show_result:
            display.display(plt.gcf())
            display.clear_output(wait=True)
        else:
            display.display(plt.gcf())

def optimize_model():
    if len(memory) < BATCH_SIZE:
        return
    transitions = memory.sample(BATCH_SIZE)
    # Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for
    # detailed explanation). This converts batch-array of Transitions
    # to Transition of batch-arrays.
    batch = Transition(*zip(*transitions))

    # Compute a mask of non-final states and concatenate the batch elements
    # (a final state would've been the one after which simulation ended)
    non_final_mask = torch.tensor(tuple(map(lambda s: s is not None,
                                          batch.next_state)), device=device, dtype=torch.bool)
    non_final_next_states = [s for s in batch.next_state if s is not None]
    non_final_next_states = {
        'board': torch.cat([s['board'][None, ::] for s in non_final_next_states]),
        'next': torch.cat([s['next'][None, ::] for s in non_final_next_states]),
        'hold': torch.cat([s['hold'][None, ::] for s in non_final_next_states])
    }

    state_batch = {
        'board': torch.cat([s['board'][None, ::] for s in batch.state]),
        'next': torch.cat([s['next'][None, ::] for s in batch.state]),
        'hold': torch.cat([s['hold'][None, ::] for s in batch.state])
    }
    action_batch = torch.cat(batch.action)
    reward_batch = torch.cat(batch.reward)

    # Compute Q(s_t, a) - the model computes Q(s_t), then we select the
    # columns of actions taken. These are the actions which would've been taken
    # for each batch state according to policy_net
    state_action_values = policy_net(state_batch).gather(1, action_batch)

    # Compute V(s_{t+1}) for all next states.
    # Expected values of actions for non_final_next_states are computed based
    # on the "older" target_net; selecting their best reward with max(1).values
    # This is merged based on the mask, such that we'll have either the expected
    # state value or 0 in case the state was final.
    next_state_values = torch.zeros(BATCH_SIZE, device=device)
    with torch.no_grad():
        next_state_values[non_final_mask] = target_net(non_final_next_states).max(1).values
    # Compute the expected Q values
    expected_state_action_values = (next_state_values * GAMMA) + reward_batch

    # Compute Huber loss
    criterion = nn.SmoothL1Loss()
    loss = criterion(state_action_values, expected_state_action_values.unsqueeze(1))

    # Optimize the model
    optimizer.zero_grad()
    loss.backward()
    # In-place gradient clipping
    torch.nn.utils.clip_grad_value_(policy_net.parameters(), 100)
    optimizer.step()

def o2t(o):
  return {
      'board': torch.tensor(o['board'], dtype=torch.float32, device=device),
      'next': torch.nn.functional.one_hot(torch.tensor(o['next'], dtype=torch.long, device=device), num_classes=len(ALL_PIECES)).float(),
      'hold': torch.nn.functional.one_hot(torch.tensor(o['hold'], dtype=torch.long, device=device), num_classes=len(ALL_PIECES)+1).float()
  }

if torch.cuda.is_available() or torch.backends.mps.is_available():
    num_episodes = 3500
else:
    num_episodes = 50

for i_episode in range(num_episodes):
    # Initialize the environment and get its state
    state, info = env.reset()
    state = o2t(state)

    for t in count():
        action = select_action(state, info)
        observation, reward, terminated, truncated, info = env.step(action.item())
        reward = torch.tensor([reward], device=device)
        done = terminated or truncated

        if terminated:
            next_state = None
        else:
            next_state = o2t(observation)

        # Store the transition in memory
        memory.push(state, action, next_state, reward)

        # Move to the next state
        state = next_state

        # Perform one step of the optimization (on the policy network)
        optimize_model()

        # Soft update of the target network's weights
        # θ′ ← τ θ + (1 −τ )θ′
        target_net_state_dict = target_net.state_dict()
        policy_net_state_dict = policy_net.state_dict()
        for key in policy_net_state_dict:
            target_net_state_dict[key] = policy_net_state_dict[key]*TAU + target_net_state_dict[key]*(1-TAU)
        target_net.load_state_dict(target_net_state_dict)

        if done:
            episode_durations.append(reward)
            plot_durations()
            break

print('Complete')
plot_durations(show_result=True)
plt.ioff()
plt.show()

obs, info = env.reset()

# Take some random actions
while(True):
  x = o2t(obs)
  rand_action = (
      policy_net({
          'board': x['board'][None, ::],
          'next': x['next'][None, ::],
          'hold': x['hold'][None, ::]
      }).squeeze() * torch.tensor(
        info['action_mask'],
        device=device,
        dtype=torch.float32
      )
  ).argmax().item()
  print(i2a(rand_action))
  obs, reward, terminated, _, info = env.step(rand_action)

  if terminated:
    print(reward)
    break

