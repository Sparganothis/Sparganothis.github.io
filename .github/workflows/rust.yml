name: Rust

on:
  push:
  #  branches: [ "master", "bos" ]
    tags: ['*']
  workflow_dispatch:

permissions:
  contents: write # for committing to gh-pages branch.
  pages: write
  id-token: write
  
concurrency:
  group: "pages"
  cancel-in-progress: false
env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  build:
    name: Build Client/Server

    # strategy:
    #   fail-fast: false
    #   matrix:
    #     os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ubuntu-latest
    # runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly

    - name: Add wasm32-unknown-unknown
      run: rustup target add wasm32-unknown-unknown
        
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        
    # - name: npm install wasm-pack
    #   run: npm install wasm-pack || ( sleep 5 && npm install wasm-pack )

    - uses: Swatinem/rust-cache@v2
      with:
        cache-all-crates: true
        # key: ${{ matrix.os }}
        cache-on-failure: true
        workspaces: |
          ./server
          ./client
          ./game
        
    - name: Install Trunk
      uses: jetli/trunk-action@v0.5.0
      with:
        version: "latest"
    
    - name: Print Trunk Version
      run: trunk --version

    - name: Install binstall
      uses: cargo-bins/cargo-binstall@main

    - name: Install wasm-bindgen
      run: cargo binstall wasm-bindgen-cli --no-confirm --force || cargo install wasm-bindgen-cli

    - name: Install wasm-pack
      run: cargo binstall wasm-pack --no-confirm --force || cargo install  wasm-pack 

    - name: Install cargo-leptos
      run: cargo binstall cargo-leptos --no-confirm --force || cargo install  cargo-leptos
      
    - name: wasm-pack --version
      run: wasm-pack --version

    - name: GAME TEST HOST # ${{ matrix.os }}
      run: cd game && cargo test 
  
    - name: GAME TEST WASM # ${{ matrix.os }}
      run: cd game && wasm-pack test --node 

    - name: SERVER TEST # ${{ matrix.os }}
      run: cd server && cargo test

    - name: CLIENT TEST # ${{ matrix.os }}
      run: cd client && cargo test && wasm-pack test --node

    # - na/me: CLIENT BUILD # ${{ matrix.os }}
    # run: cd client && echo "wss://ws.sparganothis.org/api/ws" > src/websocket.txt && trunk build

    - name: Trunk Build Prod
      run: cd client && echo "wss://ws.sparganothis.org/api/ws" > src/websocket.txt && (  trunk build --release --minify --public-url "/" ||  trunk build --release --minify --public-url "/" ||  trunk build --release --minify --public-url "/" ) && echo '/* /index.html 200' > dist/_redirects && cp dist/index.html dist/404.html

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: "./client/dist"

  release_pages:
    name: Release Github Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [build]
    steps:
    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        enablement: true
    - uses: actions/download-artifact@v4
    - name: print all downloaded artifacts
      run: ls -R .
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4


  release_backend_ssh:
    name: Release Backend on SSH
    environment:
      name: backend-ssh
    runs-on: ubuntu-latest
    needs: [build, release_pages]
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
    - name: SSH Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        key: ${{ secrets.SSH_KEY }}
        username: ${{ secrets.SSH_USER }}
        script_stop: true
        script: |
          set -e
          cd Sparganothis
          git fetch -ap --tags
          git checkout  ${{  github.ref_name }}
          git status
          sleep 30
          touch server/src/main.rs

